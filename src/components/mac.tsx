/* eslint-disable */
import { useSpring } from '@react-spring/core';
import { a as three } from '@react-spring/three';
import { a as web } from '@react-spring/web';
import { ContactShadows, Environment, useGLTF } from '@react-three/drei';
import { Canvas, useFrame } from '@react-three/fiber';
import React, {
  Suspense, useEffect, useRef, useState
} from 'react';
import { Tween } from 'react-gsap';
import { Controller, Scene } from 'react-scrollmagic';
import styled from 'styled-components';
import * as THREE from 'three';
import { Container, ContainerContentStandard } from '../styles/container';
import { device } from '../theme/theme';

const vec = new THREE.Vector3();

interface ModelProps {
  open: any;
  hinge: any;
}

function Model({ open, hinge, ...props }: ModelProps) {
  const group: any = useRef(null!);
  // Load model
  const { nodes, materials }: any = useGLTF('/mac-draco.glb');
  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false);
  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered]);
  // Make it float in the air when it's opened
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    state.camera.position.lerp(vec.set(0, 0, open ? -24 : -32), 0.1);
    state.camera.lookAt(0, 0, 0);
    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? Math.cos(t / 2) / 8 + 0.25 : 0, 0.1);
    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? Math.sin(t / 4) / 4 : 0, 0.1);
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? Math.sin(t / 4) / 4 : 0, 0.1);
    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? (-2 + Math.sin(t)) / 3 : -4.3, 0.1);
  });
  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <group
      ref={group}
      {...props}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => setHovered(false)}
      dispose={null}
    >
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes.Cube008.geometry} />
          <mesh material={materials['matte.001']} geometry={nodes.Cube008_1.geometry} />
          <mesh material={materials['screen.001']} geometry={nodes.Cube008_2.geometry} />
        </group>
      </three.group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes.Cube002.geometry} />
        <mesh material={materials.trackpad} geometry={nodes.Cube002_1.geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  );
}


export const MacHeadline = styled.span`
  text-align: center;

  h2 {
    color: ${(props) => props.theme.colors.fontWhite};
    margin: 0;
    margin: 0;
    padding: 0;
    position: absolute;
    top: 40%;
    left: 50%;
    font-size: 48px;
    width: 100%;
  }

  h3 {
    color: ${(props) => props.theme.colors.fontWhite};
    margin-bottom: 150px;
    font-size: 26px;
  }

      @media ${device.laptop} {
      h2 {
        top: 50%;
        font-size: 60px;
      }
      h3 {
            margin-bottom: 200px;
            font-size: 36px;
      }
    }
`;

export default function Mac() {
  // This flag controls open state, alternates between true & false
  const [open, setOpen] = useState(false);
  // We turn this into a spring animation that interpolates between 0 and 1
  const props = useSpring({ open: Number(open) });
  return (
    <>
      <Controller>
        <Scene duration={300} pin triggerHook={0}>
          {(progress: any) => {
            setOpen(progress > 0);

            return (
              <web.main style={{ height: '60vh', position: 'relative', background: props.open.to([0, 1], ['#14142b', '#14142b']) }}>
                <Container style={{ position: 'unset' }}>
                  <ContainerContentStandard>
                    <MacHeadline>
                      <web.h2 style={{ opacity: props.open.to([0, 1], [1, 0]), transform: props.open.to((o) => `translate3d(-50%,${o * 50 - 50}px,0)`) }}>
                        Are you ready to start?
                       </web.h2>
                    </MacHeadline>
                  </ContainerContentStandard>
                </Container>
                <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 0], fov: 35 }}>
                  <three.pointLight position={[10, 10, 10]} intensity={1.5} color={props.open.to([0, 1], ['#FFFFFF', '#14142b'])} />
                  <Suspense fallback={null}>
                    <group rotation={[0, Math.PI, 0]} onClick={(e) => (e.stopPropagation(), setOpen(!open))}>
                      <Model open={open} hinge={props.open.to([0, 1], [1.575, -0.425])} />
                    </group>
                    <Environment preset="city" />
                  </Suspense>
                  <ContactShadows rotation-x={Math.PI / 2} position={[0, -4.5, 0]} opacity={0.4} width={20} height={20} blur={2} far={4.5} />
                </Canvas>
              </web.main>
            )
          }}
        </Scene>
        <Scene duration={500} triggerHook={1}>
          <Tween
            from={{ opacity: 0 }}
            to={{ opacity: 1 }}
          >
            <Container>
              <ContainerContentStandard>
                <MacHeadline>
                  <web.h3>
                    Life is too short to compromise. My purpose is to built the most stunning and immersive experiences to people around the world. To deliver complexity with ease. To start where others stop.
                  </web.h3>
                </MacHeadline>
              </ContainerContentStandard>
            </Container>
          </Tween>
        </Scene>
      </Controller>
    </>
  );
}
